@model VinodNair.Blog.Web.ViewModels.HomeViewModel

@{
    ViewData["Title"] = "Home Page";
}


<div class="container col-xxl-8 px-4 py-5">
    <div class="row align-items-center g-5 py-5">
        <div class="col-12 col-lg-6">
            <h1 class="display-5 fw-bold lh-1 mb-3">
                Blog Management - Assignment
            </h1>
            <p class="lead">
                The system follows Onion Architecture / Clean Architecture principles, it solves problem of separation of concern and tightly coupled components from N-layered

                Below is a detailed description for the main layers
                1. Domain Layer:
                This layer does not depend on any other layer. This layer contains entities, enums, specifications etc.
                Add repository and unit of work contracts in this layer.

                2. Application Layer:
                This layer contains business logic, services, service interfaces, request and response models.
                Third party service interfaces are also defined in this layer.
                This layer depends on domain layer.

                3. Infrastructure Layer:
                This layer contains database related logic (Repositories and DbContext), and third party library implementation (like logger and email service).
                This implementation is based on domain and application layer.

                4. Presentation Layer:
                This layer contains Webapi or UI.
            </p>
        </div>

        <div class="col-12 col-lg-6">
            <img src="https://raw.githubusercontent.com/NilavPatel/dotnet-onion-architecture/main/docs/dotnet-onion-architecture.png"
                 alt="Blog - Test blogs"
                 class="d-block mx-lg-auto img-fluid" width="300" />
        </div>
    </div>
</div>